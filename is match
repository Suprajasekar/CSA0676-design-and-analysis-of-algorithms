def is_match(s, p):
    m, n = len(s), len(p)
    
    # Initialize the DP table
    dp = [[False] * (n + 1) for _ in range(m + 1)]
    dp[0][0] = True
    
    # Fill the first row for patterns with '*' that can match an empty string
    for j in range(2, n + 1):
        if p[j - 1] == '*':
            dp[0][j] = dp[0][j - 2]

    # Fill the DP table
    for i in range(1, m + 1):
        for j in range(1, n + 1):
            if p[j - 1] == '*':
                # * can match zero occurrences or one/more occurrences of the previous element
                dp[i][j] = dp[i][j - 2] or (dp[i - 1][j] and (s[i - 1] == p[j - 2] or p[j - 2] == '.'))
            else:
                # Match current characters
                dp[i][j] = dp[i - 1][j - 1] and (s[i - 1] == p[j - 1] or p[j - 1] == '.')
    
    return dp[m][n]

# Example usage:
print(is_match("aa", "a"))            # Output: False
print(is_match("aa", "a*"))           # Output: True
print(is_match("ab", ".*"))           # Output: True
print(is_match("aab", "c*a*b"))       # Output: True
print(is_match("mississippi", "mis*is*p*."))  # Output: False
