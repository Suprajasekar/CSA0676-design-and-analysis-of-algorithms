class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def constructMaximumBinaryTree(nums):
    if not nums:
        return None
    
    # Find the index of the maximum value in the array
    max_index = nums.index(max(nums))
    
    # Create the root node with the maximum value
    root = TreeNode(nums[max_index])
    
    # Recursively build the left and right subtrees
    root.left = constructMaximumBinaryTree(nums[:max_index])
    root.right = constructMaximumBinaryTree(nums[max_index + 1:])
    
    return root

# Example usage
nums = [3, 2, 1, 6, 0, 5]
root = constructMaximumBinaryTree(nums)

# Function to print the tree in a pre-order traversal
def printTree(node):
    if node:
        print(node.val, end=' ')
        printTree(node.left)
        printTree(node.right)

printTree(root)  # Output: 6 3 2 1 5 0
