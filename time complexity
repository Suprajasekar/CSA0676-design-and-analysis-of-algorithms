#include <stdio.h>
#include <time.h>

// Function with O(1) complexity
void constant_time(int n) {
    printf("This function has O(1) complexity.\n");
}

// Function with O(n) complexity
void linear_time(int n) {
    printf("This function has O(n) complexity.\n");
    for (int i = 0; i < n; i++) {
        // Simulate some work
    }
}

// Function with O(n^2) complexity
void quadratic_time(int n) {
    printf("This function has O(n^2) complexity.\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            // Simulate some work
        }
    }
}

// Function with O(log n) complexity
void logarithmic_time(int n) {
    printf("This function has O(log n) complexity.\n");
    for (int i = n; i > 1; i /= 2) {
        // Simulate some work
    }
}

// Function with O(n log n) complexity
void linearithmic_time(int n) {
    printf("This function has O(n log n) complexity.\n");
    for (int i = 0; i < n; i++) {
        for (int j = n; j > 1; j /= 2) {
            // Simulate some work
        }
    }
}

// Function to measure the execution time of a given function
void measure_time(void (*func)(int), int n) {
    clock_t start, end;
    double cpu_time_used;
    
    start = clock();
    func(n);
    end = clock();
    
    cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
    printf("Time taken: %f seconds\n\n", cpu_time_used);
}

int main() {
    int n = 1000; // Adjust n as needed for demonstration

    // Measure and display time complexity for different functions
    measure_time(constant_time, n);
    measure_time(linear_time, n);
    measure_time(quadratic_time, n);
    measure_time(logarithmic_time, n);
    measure_time(linearithmic_time, n);

    return 0;
}
