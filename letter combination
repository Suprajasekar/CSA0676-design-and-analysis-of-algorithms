def letterCombinations(digits):
    if not digits:
        return []
    
    # Define the mapping of digits to letters
    digit_map = {
        '2': 'abc', '3': 'def', '4': 'ghi',
        '5': 'jkl', '6': 'mno', '7': 'pqrs',
        '8': 'tuv', '9': 'wxyz'
    }
    
    def backtrack(combination, next_digits):
        # If there are no more digits to check, add the combination to the result
        if len(next_digits) == 0:
            output.append(combination)
        else:
            # Iterate over all possible letters for the next digit
            for letter in digit_map[next_digits[0]]:
                # Add the current letter to the combination and continue with the next digit
                backtrack(combination + letter, next_digits[1:])
    
    output = []
    backtrack('', digits)
    return output

# Example usage
print(letterCombinations("23"))  # Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
