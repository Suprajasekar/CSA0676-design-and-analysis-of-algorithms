class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def add_two_numbers(l1, l2):
    dummy = ListNode(0)  # Initialize a dummy node
    current = dummy
    carry = 0  # Initialize carry to 0
    
    while l1 is not None or l2 is not None:
        # Get values from current nodes, or 0 if the node is None
        x = l1.val if l1 is not None else 0
        y = l2.val if l2 is not None else 0
        
        # Calculate sum and update carry
        total = carry + x + y
        carry = total // 10
        current.next = ListNode(total % 10)
        
        # Move to the next nodes
        current = current.next
        if l1 is not None:
            l1 = l1.next
        if l2 is not None:
            l2 = l2.next
    
    # Check if there is a carry left
    if carry > 0:
        current.next = ListNode(carry)
    
    return dummy.next

# Helper function to create a linked list from a list of integers
def create_linked_list(lst):
    dummy = ListNode()
    current = dummy
    for number in lst:
        current.next = ListNode(number)
        current = current.next
    return dummy.next

# Helper function to print a linked list
def print_linked_list(node):
    while node:
        print(node.val, end=' -> ' if node.next else '\n')
        node = node.next

# Example usage:
l1 = create_linked_list([2, 4, 3])
l2 = create_linked_list([5, 6, 4])
result = add_two_numbers(l1, l2)
print_linked_list(result)  # Output: 7 -> 0 -> 8
