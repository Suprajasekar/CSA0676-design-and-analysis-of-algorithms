import sys

def floyd_algorithm(n, edges):
    INF = sys.maxsize
    dist = [[INF for _ in range(n)] for _ in range(n)]

    for i in range(n):
        dist[i][i] = 0

    for u, v, w in edges:
        dist[u][v] = w

    for k in range(n):
        for i in range(n):
            for j in range(n):
                dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])

    print("Distance Matrix Before Floyd's Algorithm:")
    for row in dist:
        print(row)

    print("\nDistance Matrix After Floyd's Algorithm:")
    for row in dist:
        print(row)

    print("\nShortest Paths:")
    for i in range(n):
        for j in range(n):
            if dist[i][j] != INF:
                print(f"Shortest path from {i} to {j}: {dist[i][j]}")

# Input
n = 4
edges = [[0, 1, 3], [1, 2, 1], [1, 3, 4], [2, 3, 1]]

# Applying Floyd's Algorithm
floyd_algorithm(n, edges)
